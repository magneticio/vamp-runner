---
kind: breeds
name: auto-scaling
deployable:
  type: application/javascript
  definition: |
    'use strict';

    let _ = require('highland');
    let vamp = require('vamp-node-client');

    let api = new vamp.Api();
    let http = new vamp.Http();
    let logger = new vamp.Log();
    let headers = {'Accept': 'application/json', 'Content-Type': 'application/json'};

    var $gateway = process.env.GATEWAY;

    var $route1 = process.env.ROUTE1;
    var $route2 = process.env.ROUTE2;

    var $service1 = process.env.SERVICE1;
    var $service2 = process.env.SERVICE2;

    var $scaleMax = Number(process.env.SCALE_MAX);
    var $scaleMin = Number(process.env.SCALE_MIN);

    var $period = Number(process.env.PERIOD); // seconds

    var route1RatePath = 'metrics/gateways/' + encodeURIComponent($gateway) + '/routes/' + encodeURIComponent($route1) + '/rate';
    var route2RatePath = 'metrics/gateways/' + encodeURIComponent($gateway) + '/routes/' + encodeURIComponent($route2) + '/rate';

    var run = function () {
      api.get(route1RatePath).each(function (rate1) {
        api.get(route2RatePath).each(function (rate2) {
          rate1 = Number(rate1);
          rate2 = Number(rate2);

          logger.log('rate \'' + $route1 + '\': ' + rate1);
          logger.log('rate \'' + $route2 + '\': ' + rate2);

          api.get($service1 + '/scale').each(function (scale1) {
            api.get($service2 + '/scale').each(function (scale2) {
              var instances1 = Math.round(($scaleMax + $scaleMin) / 2);
              var instances2 = instances1;

              if (rate1 + rate2 != 0) {
                instances1 = Math.round((rate1 / (rate1 + rate2)) * ($scaleMax - $scaleMin) + $scaleMin);
                instances2 = Math.round((rate2 / (rate1 + rate2)) * ($scaleMax - $scaleMin) + $scaleMin);
              }

              logger.log('instances1 \'' + $service1 + '\': ' + instances1);
              logger.log('instances2 \'' + $service2 + '\': ' + instances2);

              if (scale1.instances != instances1 || scale2.instances != instances2) {
                scale1.instances = instances1;
                scale2.instances = instances2;

                updateScale($service1, scale1);
                updateScale($service2, scale2);
              }
            });
          });
        });
      });
    };

    var updateScale = function (service, scale) {
      http.request(api.url + '/' + service + '/scale', {method: 'PUT', headers: headers}, JSON.stringify(scale)).then(function () {
        api.event(['workflows:auto-scaling', 'scale', 'services:' + service], scale.instances);
      }).catch(function (error) {
        api.event(['workflows:auto-scaling', 'error', 'services:' + service], error);
      });
    };

    run();
    setInterval(run, $period * 1000);

---
kind: workflows
name: auto-scaling
breed: auto-scaling
schedule: daemon
environment_variables:
  PERIOD   : 15
  GATEWAY  : "sava/sava/web"
  ROUTE1   : "sava/sava/sava:1.0/web"
  ROUTE2   : "sava/sava/sava:1.1/web"
  SERVICE1 : "deployments/sava/clusters/sava/services/sava:1.0"
  SERVICE2 : "deployments/sava/clusters/sava/services/sava:1.1"
  SCALE_MAX: 4
  SCALE_MIN: 2
  VAMP_API_CACHE: false
  VAMP_WORKFLOW_EXECUTION_PERIOD:  0
  VAMP_WORKFLOW_EXECUTION_TIMEOUT: 0
